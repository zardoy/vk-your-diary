### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum AcessLevel {
  MEMBER
  MODERATOR
  OWNER
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type CreatedGroup {
  avatar_50: URL
  id: Int!
  inviteToken: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

scalar DateTime

type File {
  addedByUserId: Int
  fileLink: String!
  id: Int!
}

input FileWhereUniqueInput {
  id: Int
}

type FoundGroupForJoin {
  name: String!
}

type GroupMember {
  avatar_50: URL
  fullName: String
  isModerator: Boolean!
  joinDate: DateTime!
  userId: Int!
}

type GroupMutation {
  changeName(name: String!): Boolean!

  """Returns a new token"""
  generateNewInviteToken: String!
  homework: HomeworkMutation!

  """Only owner can kick moderators"""
  kickMember(memberUserIdToKick: BigInt!): Boolean!
  leaveForever: Boolean!
  setInviteLinkStatus(enabled: Boolean!): Boolean!

  """
  This action will preserve moderator status to the user and will give moderator s to the new owner as well.
  """
  transferOwner(newOwnerId: BigInt!): Boolean!
  updateDescription(description: String!): Boolean!
}

type GroupQuery {
  acessLevel: AcessLevel!
  description: String!
  homework: HomeworkQuery!
  inviteToken: String
  knownSubjects: [NonEmptyString!]!
  members: [GroupMember!]!
}

type Homework {
  attachedFiles(cursor: FileWhereUniqueInput, skip: Int!, take: Int!): [File!]!
  createdBy: DateTime!
  id: Int!
  subject: String!
  text: String!
  updatedAt: DateTime
}

type HomeworkMutation {
  add(date: Date!, subject: NonEmptyString!, text: NonEmptyString!): Int!
  edit(homeworkId: Int!, newData: NewHomeworkInput!): Boolean!
  remove(homeworkId: Int!): Boolean!
}

type HomeworkQuery {
  byDay(date: Date!): [Homework!]!
}

type JoinedGroup {
  id: Int!

  """Always false if group isn't moderated"""
  isModerator: Boolean!
  membersCount: NonNegativeInt!
  name: String!
  ownerAvatar_50: URL
  ownerId: BigInt!
}

type Mutation {
  """Return an invite token, if appropriate arg is true."""
  createGroup(
    """Required but can be empty"""
    description: String!
    enableInviteLink: Boolean!
    moderated: Boolean!
    name: NonEmptyString!
  ): CreatedGroup!
  findGroup(inviteToken: NonEmptyString!): FoundGroupForJoin!
  group(id: Int!): GroupMutation!
  joinGroup(inviteToken: NonEmptyString!): Boolean!
}

input NewHomeworkInput {
  date: Date
  subject: NonEmptyString
  text: NonEmptyString
}

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

type Query {
  group(id: Int!): GroupQuery!
  joinedGroups: [JoinedGroup!]!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID
