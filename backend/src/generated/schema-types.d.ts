/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as NexusContext from "../context"
import * as RootTypes from "../rootTypes"
import * as prisma from "../../node_modules/.prisma/client/index"
import { core, connectionPluginCore } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    userId<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "BigInt";
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
    UUID<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "UUID";
    nonEmptyString<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "NonEmptyString";
    nonNegativeInt<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "NonNegativeInt";
    URL<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "URL";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    userId<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    UUID<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "UUID";
    nonEmptyString<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "NonEmptyString";
    nonNegativeInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "NonNegativeInt";
    URL<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "URL";
    connectionField<FieldName extends string>(
            fieldName: FieldName, 
            config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> 
          ): void
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  FileWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  NewHomeworkInput: { // input type
    date?: NexusGenScalars['Date'] | null; // Date
    subject?: NexusGenScalars['NonEmptyString'] | null; // NonEmptyString
    text?: NexusGenScalars['NonEmptyString'] | null; // NonEmptyString
  }
}

export interface NexusGenEnums {
  AcessLevel: "MEMBER" | "MODERATOR" | "OWNER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Date: any
  DateTime: any
  NonEmptyString: any
  NonNegativeInt: any
  URL: any
  UUID: any
}

export interface NexusGenRootTypes {
  CreatedGroup: { // root type
    avatar_50?: NexusGenScalars['URL'] | null; // URL
    id: number; // Int!
    inviteToken?: string | null; // String
  }
  File: prisma.File;
  FoundGroupForJoin: { // root type
    name: string; // String!
  }
  GroupMember: { // root type
    avatar_50?: NexusGenScalars['URL'] | null; // URL
    fullName?: string | null; // String
    isModerator: boolean; // Boolean!
    joinDate: NexusGenScalars['DateTime']; // DateTime!
    userId: number; // Int!
  }
  GroupMutation: RootTypes.GroupMutation;
  GroupQuery: RootTypes.GroupQuery;
  Homework: prisma.Homework;
  HomeworkMutation: RootTypes.HomeworkMutation;
  HomeworkQuery: RootTypes.HomeworkQuery;
  JoinedGroup: { // root type
    id: number; // Int!
    isModerator: boolean; // Boolean!
    membersCount: NexusGenScalars['NonNegativeInt']; // NonNegativeInt!
    name: string; // String!
    ownerAvatar_50?: NexusGenScalars['URL'] | null; // URL
    ownerId: NexusGenScalars['BigInt']; // BigInt!
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  FileWhereUniqueInput: NexusGenInputs['FileWhereUniqueInput'];
  NewHomeworkInput: NexusGenInputs['NewHomeworkInput'];
  AcessLevel: NexusGenEnums['AcessLevel'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  BigInt: NexusGenScalars['BigInt'];
  Date: NexusGenScalars['Date'];
  DateTime: NexusGenScalars['DateTime'];
  NonEmptyString: NexusGenScalars['NonEmptyString'];
  NonNegativeInt: NexusGenScalars['NonNegativeInt'];
  URL: NexusGenScalars['URL'];
  UUID: NexusGenScalars['UUID'];
}

export interface NexusGenFieldTypes {
  CreatedGroup: { // field return type
    avatar_50: NexusGenScalars['URL'] | null; // URL
    id: number; // Int!
    inviteToken: string | null; // String
  }
  File: { // field return type
    addedByUserId: number | null; // Int
    fileLink: string; // String!
    id: number; // Int!
  }
  FoundGroupForJoin: { // field return type
    name: string; // String!
  }
  GroupMember: { // field return type
    avatar_50: NexusGenScalars['URL'] | null; // URL
    fullName: string | null; // String
    isModerator: boolean; // Boolean!
    joinDate: NexusGenScalars['DateTime']; // DateTime!
    userId: number; // Int!
  }
  GroupMutation: { // field return type
    changeName: boolean; // Boolean!
    generateNewInviteToken: string; // String!
    homework: NexusGenRootTypes['HomeworkMutation']; // HomeworkMutation!
    kickMember: boolean; // Boolean!
    leaveForever: boolean; // Boolean!
    setInviteLinkStatus: boolean; // Boolean!
    transferOwner: boolean; // Boolean!
    updateDescription: boolean; // Boolean!
  }
  GroupQuery: { // field return type
    acessLevel: NexusGenEnums['AcessLevel']; // AcessLevel!
    description: string; // String!
    homework: NexusGenRootTypes['HomeworkQuery']; // HomeworkQuery!
    inviteToken: string | null; // String
    knownSubjects: NexusGenScalars['NonEmptyString'][]; // [NonEmptyString!]!
    members: NexusGenRootTypes['GroupMember'][]; // [GroupMember!]!
  }
  Homework: { // field return type
    attachedFiles: NexusGenRootTypes['File'][]; // [File!]!
    createdBy: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    subject: string; // String!
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  HomeworkMutation: { // field return type
    add: number; // Int!
    edit: boolean; // Boolean!
    remove: boolean; // Boolean!
  }
  HomeworkQuery: { // field return type
    byDay: NexusGenRootTypes['Homework'][]; // [Homework!]!
  }
  JoinedGroup: { // field return type
    id: number; // Int!
    isModerator: boolean; // Boolean!
    membersCount: NexusGenScalars['NonNegativeInt']; // NonNegativeInt!
    name: string; // String!
    ownerAvatar_50: NexusGenScalars['URL'] | null; // URL
    ownerId: NexusGenScalars['BigInt']; // BigInt!
  }
  Mutation: { // field return type
    createGroup: NexusGenRootTypes['CreatedGroup']; // CreatedGroup!
    findGroup: NexusGenRootTypes['FoundGroupForJoin']; // FoundGroupForJoin!
    group: NexusGenRootTypes['GroupMutation']; // GroupMutation!
    joinGroup: boolean; // Boolean!
  }
  Query: { // field return type
    group: NexusGenRootTypes['GroupQuery']; // GroupQuery!
    joinedGroups: NexusGenRootTypes['JoinedGroup'][]; // [JoinedGroup!]!
  }
}

export interface NexusGenArgTypes {
  GroupMutation: {
    changeName: { // args
      name: string; // String!
    }
    kickMember: { // args
      memberUserIdToKick: NexusGenScalars['BigInt']; // BigInt!
    }
    setInviteLinkStatus: { // args
      enabled: boolean; // Boolean!
    }
    transferOwner: { // args
      newOwnerId: NexusGenScalars['BigInt']; // BigInt!
    }
    updateDescription: { // args
      description: string; // String!
    }
  }
  Homework: {
    attachedFiles: { // args
      cursor?: NexusGenInputs['FileWhereUniqueInput'] | null; // FileWhereUniqueInput
      skip: number; // Int!
      take: number; // Int!
    }
  }
  HomeworkMutation: {
    add: { // args
      date: NexusGenScalars['Date']; // Date!
      subject: NexusGenScalars['NonEmptyString']; // NonEmptyString!
      text: NexusGenScalars['NonEmptyString']; // NonEmptyString!
    }
    edit: { // args
      homeworkId: number; // Int!
      newData: NexusGenInputs['NewHomeworkInput']; // NewHomeworkInput!
    }
    remove: { // args
      homeworkId: number; // Int!
    }
  }
  HomeworkQuery: {
    byDay: { // args
      date: NexusGenScalars['Date']; // Date!
    }
  }
  Mutation: {
    createGroup: { // args
      description: string; // String!
      enableInviteLink: boolean; // Boolean!
      moderated: boolean; // Boolean!
      name: NexusGenScalars['NonEmptyString']; // NonEmptyString!
    }
    findGroup: { // args
      inviteToken: NexusGenScalars['NonEmptyString']; // NonEmptyString!
    }
    group: { // args
      id: number; // Int!
    }
    joinGroup: { // args
      inviteToken: NexusGenScalars['NonEmptyString']; // NonEmptyString!
    }
  }
  Query: {
    group: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "CreatedGroup" | "File" | "FoundGroupForJoin" | "GroupMember" | "GroupMutation" | "GroupQuery" | "Homework" | "HomeworkMutation" | "HomeworkQuery" | "JoinedGroup" | "Mutation" | "Query";

export type NexusGenInputNames = "FileWhereUniqueInput" | "NewHomeworkInput";

export type NexusGenEnumNames = "AcessLevel";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "BigInt" | "Boolean" | "Date" | "DateTime" | "Float" | "ID" | "Int" | "NonEmptyString" | "NonNegativeInt" | "String" | "URL" | "UUID";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: NexusContext.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
}